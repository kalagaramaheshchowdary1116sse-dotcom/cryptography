import numpy as np

def mod_inverse_matrix(matrix, m=26):
    det = int(np.round(np.linalg.det(matrix)))
    det = det % m
    inv_det = pow(det, -1, m)
    matrix_adj = np.round(det * np.linalg.inv(matrix)).astype(int) % m
    return (inv_det * matrix_adj) % m

P = np.array([[0,19,13],[13,19,7],[19,0,19]])  # plaintext blocks
C = np.array([[19,0,13],[0,19,19],[13,19,7]])  # ciphertext blocks

P_inv = mod_inverse_matrix(P)
K = (C @ P_inv) % 26
print("Recovered Key Matrix:\n", K)

