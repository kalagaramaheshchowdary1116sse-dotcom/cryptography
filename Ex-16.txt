def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def multiplicative_inverse(e, phi):
    d = 0
    x1, x2, y1 = 0, 1, 1
    temp_phi = phi
    while e > 0:
        temp1, temp2 = divmod(temp_phi, e)
        temp_phi, e = e, temp2
        x, y = x2 - temp1 * x1, d - temp1 * y1
        x2, x1, d, y1 = x1, x, y1, y
    if temp_phi == 1:
        return d + phi

def generate_keypair(p, q):
    n = p * q
    phi = (p-1) * (q-1)
    e = 65537
    while gcd(e, phi) != 1:
        e += 2
    d = multiplicative_inverse(e, phi)
    return ((e, n), (d, n))

def encrypt(pk, plaintext):
    e, n = pk
    return [pow(ord(ch), e, n) for ch in plaintext]

def decrypt(pk, ciphertext):
    d, n = pk
    return ''.join([chr(pow(c, d, n)) for c in ciphertext])

p, q = 61, 53  # example primes
public, private = generate_keypair(p, q)

msg = input("Enter message: ")
enc = encrypt(public, msg)
print("Encrypted:", enc)
print("Decrypted:", decrypt(private, enc))

