import hashlib

def create_certificate(subject, issuer, pubkey, privkey):
    data = subject + issuer + str(pubkey)
    h = int(hashlib.sha256(data.encode()).hexdigest(), 16)
    signature = pow(h, privkey[0], privkey[1])
    return {"subject": subject, "issuer": issuer, "pubkey": pubkey, "signature": signature}

def verify_certificate(cert, issuer_pubkey):
    data = cert["subject"] + cert["issuer"] + str(cert["pubkey"])
    h = int(hashlib.sha256(data.encode()).hexdigest(), 16)
    check = pow(cert["signature"], issuer_pubkey[0], issuer_pubkey[1])
    return h % issuer_pubkey[1] == check

# RSA keys for issuer (simple small primes)
def generate_keypair(p, q):
    n = p * q
    phi = (p-1)*(q-1)
    e = 17
    d = pow(e, -1, phi)
    return (e,n),(d,n)

issuer_pub, issuer_priv = generate_keypair(61,53)
subject_pub, subject_priv = generate_keypair(47,59)

cert = create_certificate("Alice", "CA", subject_pub, issuer_priv)
print("Certificate:", cert)
print("Verification:", "Valid" if verify_certificate(cert, issuer_pub) else "Invalid")

